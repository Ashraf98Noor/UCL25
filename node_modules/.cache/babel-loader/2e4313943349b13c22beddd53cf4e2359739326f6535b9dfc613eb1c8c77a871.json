{"ast":null,"code":"import Papa from 'papaparse';\nexport const loadCSVData = async () => {\n  try {\n    console.log('Attempting to fetch CSV data...');\n    const response = await fetch('/UCL_24_25_Key_Data - Sheet1.csv');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV data: ${response.status} ${response.statusText}`);\n    }\n    const csvText = await response.text();\n    console.log('CSV data fetched successfully, parsing...');\n    return new Promise((resolve, reject) => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        transformHeader: header => {\n          // Map the per 90 stats columns to their correct field names\n          const headerMap = {\n            'Gls': 'Gls.1',\n            'Ast': 'Ast.1',\n            'G+A': 'G+A.1',\n            'G-PK': 'G-PK.1',\n            'xG': 'xG.1',\n            'xAG': 'xAG.1'\n          };\n          return headerMap[header] || header;\n        },\n        transform: (value, field) => {\n          // Convert numeric fields\n          const numericFields = ['Born', 'MP', 'Starts', 'Min', '90s', 'Gls', 'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG', 'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'PrgR', 'Gls.1', 'Ast.1', 'G+A.1', 'G-PK.1', 'G+A-PK', 'xG.1', 'xAG.1', 'xG+xAG', 'npxG.1', 'npxG+xAG.1'];\n          if (numericFields.includes(field)) {\n            // Remove commas and quotes before parsing\n            const cleanValue = value.replace(/[\",]/g, '');\n            const num = parseFloat(cleanValue);\n            if (field === 'Min' || field === 'MP' || field === 'Gls.1' || field === 'Ast.1' || field === 'G+A.1') {\n              console.log(`Converting ${field} value: \"${value}\" -> \"${cleanValue}\" to number: ${num}`);\n            }\n            return isNaN(num) ? 0 : num;\n          }\n          return value;\n        },\n        complete: results => {\n          if (results.errors.length > 0) {\n            console.error('CSV parsing errors:', results.errors);\n            reject(new Error('Failed to parse CSV data'));\n            return;\n          }\n          const players = results.data;\n          if (!players.length) {\n            console.error('No player data found in CSV');\n            reject(new Error('No player data found in CSV'));\n            return;\n          }\n          console.log(`Successfully loaded ${players.length} players`);\n          // Log a sample player to check data structure\n          if (players.find(p => p.Player === 'Raphinha')) {\n            const raphinha = players.find(p => p.Player === 'Raphinha');\n            console.log('Raphinha data:', raphinha);\n            console.log('Raphinha per 90 stats:', {\n              goals90: raphinha === null || raphinha === void 0 ? void 0 : raphinha['Gls.1'],\n              assists90: raphinha === null || raphinha === void 0 ? void 0 : raphinha['Ast.1'],\n              gaPer90: raphinha === null || raphinha === void 0 ? void 0 : raphinha['G+A.1']\n            });\n          }\n          resolve(players);\n        },\n        error: error => {\n          console.error('Error parsing CSV:', error);\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('Error loading CSV data:', error);\n    throw error instanceof Error ? error : new Error('Failed to load CSV data');\n  }\n};","map":{"version":3,"names":["Papa","loadCSVData","console","log","response","fetch","ok","Error","status","statusText","csvText","text","Promise","resolve","reject","parse","header","skipEmptyLines","transformHeader","headerMap","transform","value","field","numericFields","includes","cleanValue","replace","num","parseFloat","isNaN","complete","results","errors","length","error","players","data","find","p","Player","raphinha","goals90","assists90","gaPer90"],"sources":["/Users/ashrafnoor/Port Repo/UCL 24:25/src/services/csvService.ts"],"sourcesContent":["import Papa from 'papaparse';\nimport { Player } from '../types/player';\n\nexport const loadCSVData = async (): Promise<Player[]> => {\n  try {\n    console.log('Attempting to fetch CSV data...');\n    const response = await fetch('/UCL_24_25_Key_Data - Sheet1.csv');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV data: ${response.status} ${response.statusText}`);\n    }\n    const csvText = await response.text();\n    console.log('CSV data fetched successfully, parsing...');\n    \n    return new Promise((resolve, reject) => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        transformHeader: (header: string) => {\n          // Map the per 90 stats columns to their correct field names\n          const headerMap: { [key: string]: string } = {\n            'Gls': 'Gls.1',\n            'Ast': 'Ast.1',\n            'G+A': 'G+A.1',\n            'G-PK': 'G-PK.1',\n            'xG': 'xG.1',\n            'xAG': 'xAG.1'\n          };\n          return headerMap[header] || header;\n        },\n        transform: (value: string, field: string) => {\n          // Convert numeric fields\n          const numericFields = [\n            'Born', 'MP', 'Starts', 'Min', '90s', 'Gls', 'Ast', 'G+A', 'G-PK', \n            'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG', 'xAG', 'npxG+xAG',\n            'PrgC', 'PrgP', 'PrgR', 'Gls.1', 'Ast.1', 'G+A.1', 'G-PK.1',\n            'G+A-PK', 'xG.1', 'xAG.1', 'xG+xAG', 'npxG.1', 'npxG+xAG.1'\n          ] as string[];\n          \n          if (numericFields.includes(field)) {\n            // Remove commas and quotes before parsing\n            const cleanValue = value.replace(/[\",]/g, '');\n            const num = parseFloat(cleanValue);\n            if (field === 'Min' || field === 'MP' || field === 'Gls.1' || field === 'Ast.1' || field === 'G+A.1') {\n              console.log(`Converting ${field} value: \"${value}\" -> \"${cleanValue}\" to number: ${num}`);\n            }\n            return isNaN(num) ? 0 : num;\n          }\n          \n          return value;\n        },\n        complete: (results) => {\n          if (results.errors.length > 0) {\n            console.error('CSV parsing errors:', results.errors);\n            reject(new Error('Failed to parse CSV data'));\n            return;\n          }\n          \n          const players = results.data as Player[];\n          if (!players.length) {\n            console.error('No player data found in CSV');\n            reject(new Error('No player data found in CSV'));\n            return;\n          }\n          console.log(`Successfully loaded ${players.length} players`);\n          // Log a sample player to check data structure\n          if (players.find(p => p.Player === 'Raphinha')) {\n            const raphinha = players.find(p => p.Player === 'Raphinha');\n            console.log('Raphinha data:', raphinha);\n            console.log('Raphinha per 90 stats:', {\n              goals90: raphinha?.['Gls.1'],\n              assists90: raphinha?.['Ast.1'],\n              gaPer90: raphinha?.['G+A.1']\n            });\n          }\n          resolve(players);\n        },\n        error: (error: Error) => {\n          console.error('Error parsing CSV:', error);\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('Error loading CSV data:', error);\n    throw error instanceof Error ? error : new Error('Failed to load CSV data');\n  }\n}; "],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAG5B,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAA+B;EACxD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;IAChE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6BH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IACxF;IACA,MAAMC,OAAO,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IACrCT,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IAExD,OAAO,IAAIS,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCd,IAAI,CAACe,KAAK,CAACL,OAAO,EAAE;QAClBM,MAAM,EAAE,IAAI;QACZC,cAAc,EAAE,IAAI;QACpBC,eAAe,EAAGF,MAAc,IAAK;UACnC;UACA,MAAMG,SAAoC,GAAG;YAC3C,KAAK,EAAE,OAAO;YACd,KAAK,EAAE,OAAO;YACd,KAAK,EAAE,OAAO;YACd,MAAM,EAAE,QAAQ;YAChB,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE;UACT,CAAC;UACD,OAAOA,SAAS,CAACH,MAAM,CAAC,IAAIA,MAAM;QACpC,CAAC;QACDI,SAAS,EAAEA,CAACC,KAAa,EAAEC,KAAa,KAAK;UAC3C;UACA,MAAMC,aAAa,GAAG,CACpB,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EACjE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAC9D,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAC3D,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,CAChD;UAEb,IAAIA,aAAa,CAACC,QAAQ,CAACF,KAAK,CAAC,EAAE;YACjC;YACA,MAAMG,UAAU,GAAGJ,KAAK,CAACK,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;YAC7C,MAAMC,GAAG,GAAGC,UAAU,CAACH,UAAU,CAAC;YAClC,IAAIH,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,OAAO,EAAE;cACpGpB,OAAO,CAACC,GAAG,CAAC,cAAcmB,KAAK,YAAYD,KAAK,SAASI,UAAU,gBAAgBE,GAAG,EAAE,CAAC;YAC3F;YACA,OAAOE,KAAK,CAACF,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;UAC7B;UAEA,OAAON,KAAK;QACd,CAAC;QACDS,QAAQ,EAAGC,OAAO,IAAK;UACrB,IAAIA,OAAO,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;YAC7B/B,OAAO,CAACgC,KAAK,CAAC,qBAAqB,EAAEH,OAAO,CAACC,MAAM,CAAC;YACpDlB,MAAM,CAAC,IAAIP,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC7C;UACF;UAEA,MAAM4B,OAAO,GAAGJ,OAAO,CAACK,IAAgB;UACxC,IAAI,CAACD,OAAO,CAACF,MAAM,EAAE;YACnB/B,OAAO,CAACgC,KAAK,CAAC,6BAA6B,CAAC;YAC5CpB,MAAM,CAAC,IAAIP,KAAK,CAAC,6BAA6B,CAAC,CAAC;YAChD;UACF;UACAL,OAAO,CAACC,GAAG,CAAC,uBAAuBgC,OAAO,CAACF,MAAM,UAAU,CAAC;UAC5D;UACA,IAAIE,OAAO,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAK,UAAU,CAAC,EAAE;YAC9C,MAAMC,QAAQ,GAAGL,OAAO,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAK,UAAU,CAAC;YAC3DrC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEqC,QAAQ,CAAC;YACvCtC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE;cACpCsC,OAAO,EAAED,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAG,OAAO,CAAC;cAC5BE,SAAS,EAAEF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAG,OAAO,CAAC;cAC9BG,OAAO,EAAEH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAG,OAAO;YAC7B,CAAC,CAAC;UACJ;UACA3B,OAAO,CAACsB,OAAO,CAAC;QAClB,CAAC;QACDD,KAAK,EAAGA,KAAY,IAAK;UACvBhC,OAAO,CAACgC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;UAC1CpB,MAAM,CAACoB,KAAK,CAAC;QACf;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdhC,OAAO,CAACgC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK,YAAY3B,KAAK,GAAG2B,KAAK,GAAG,IAAI3B,KAAK,CAAC,yBAAyB,CAAC;EAC7E;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}