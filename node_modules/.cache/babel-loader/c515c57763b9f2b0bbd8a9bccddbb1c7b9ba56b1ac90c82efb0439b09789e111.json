{"ast":null,"code":"import Papa from'papaparse';export const loadCSVData=async()=>{try{console.log('Attempting to fetch CSV data...');const response=await fetch(process.env.PUBLIC_URL+'/UCL_24_25_Key_Data - Sheet1.csv');if(!response.ok){throw new Error(`Failed to fetch CSV data: ${response.status} ${response.statusText}`);}const csvText=await response.text();console.log('CSV data fetched successfully, parsing...');return new Promise((resolve,reject)=>{Papa.parse(csvText,{header:true,skipEmptyLines:true,transform:(value,field)=>{// Convert numeric fields\nconst numericFields=['Born','MP','Starts','Min','90s','Gls','Ast','G+A','G-PK','PK','PKatt','CrdY','CrdR','xG','npxG','xAG','npxG+xAG','PrgC','PrgP','PrgR','Gls.1','Ast.1','G+A.1','G-PK.1','G+A-PK','xG.1','xAG.1','xG+xAG','npxG.1','npxG+xAG.1'];if(numericFields.includes(field)){// Remove commas from numbers like \"1,222\"\nconst cleanValue=value.replace(/,/g,'');const num=parseFloat(cleanValue);return isNaN(num)?0:num;}return value;},complete:results=>{if(results.errors.length>0){console.error('CSV parsing errors:',results.errors);reject(new Error('Failed to parse CSV data'));return;}resolve(results.data);},error:error=>{console.error('CSV parsing error:',error);reject(error);}});});}catch(error){console.error('Error loading CSV data:',error);throw error;}};","map":{"version":3,"names":["Papa","loadCSVData","console","log","response","fetch","process","env","PUBLIC_URL","ok","Error","status","statusText","csvText","text","Promise","resolve","reject","parse","header","skipEmptyLines","transform","value","field","numericFields","includes","cleanValue","replace","num","parseFloat","isNaN","complete","results","errors","length","error","data"],"sources":["/Users/ashrafnoor/Port Repo/UCL 24:25/src/services/csvService.ts"],"sourcesContent":["import Papa from 'papaparse';\nimport { Player } from '../types/player';\n\nexport const loadCSVData = async (): Promise<Player[]> => {\n  try {\n    console.log('Attempting to fetch CSV data...');\n    const response = await fetch(process.env.PUBLIC_URL + '/UCL_24_25_Key_Data - Sheet1.csv');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV data: ${response.status} ${response.statusText}`);\n    }\n    const csvText = await response.text();\n    console.log('CSV data fetched successfully, parsing...');\n    \n    return new Promise((resolve, reject) => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        transform: (value: string, field: string) => {\n          // Convert numeric fields\n          const numericFields = [\n            'Born', 'MP', 'Starts', 'Min', '90s', 'Gls', 'Ast', 'G+A', 'G-PK', \n            'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG', 'xAG', 'npxG+xAG',\n            'PrgC', 'PrgP', 'PrgR', 'Gls.1', 'Ast.1', 'G+A.1', 'G-PK.1',\n            'G+A-PK', 'xG.1', 'xAG.1', 'xG+xAG', 'npxG.1', 'npxG+xAG.1'\n          ] as string[];\n          \n          if (numericFields.includes(field)) {\n            // Remove commas from numbers like \"1,222\"\n            const cleanValue = value.replace(/,/g, '');\n            const num = parseFloat(cleanValue);\n            return isNaN(num) ? 0 : num;\n          }\n          \n          return value;\n        },\n        complete: (results: Papa.ParseResult<Player>) => {\n          if (results.errors.length > 0) {\n            console.error('CSV parsing errors:', results.errors);\n            reject(new Error('Failed to parse CSV data'));\n            return;\n          }\n          resolve(results.data);\n        },\n        error: (error: Error) => {\n          console.error('CSV parsing error:', error);\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('Error loading CSV data:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,MAAO,CAAAA,IAAI,KAAM,WAAW,CAG5B,MAAO,MAAM,CAAAC,WAAW,CAAG,KAAAA,CAAA,GAA+B,CACxD,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAC9C,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,UAAU,CAAG,kCAAkC,CAAC,CACzF,GAAI,CAACJ,QAAQ,CAACK,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6BN,QAAQ,CAACO,MAAM,IAAIP,QAAQ,CAACQ,UAAU,EAAE,CAAC,CACxF,CACA,KAAM,CAAAC,OAAO,CAAG,KAAM,CAAAT,QAAQ,CAACU,IAAI,CAAC,CAAC,CACrCZ,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC,CAExD,MAAO,IAAI,CAAAY,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACtCjB,IAAI,CAACkB,KAAK,CAACL,OAAO,CAAE,CAClBM,MAAM,CAAE,IAAI,CACZC,cAAc,CAAE,IAAI,CACpBC,SAAS,CAAEA,CAACC,KAAa,CAAEC,KAAa,GAAK,CAC3C;AACA,KAAM,CAAAC,aAAa,CAAG,CACpB,MAAM,CAAE,IAAI,CAAE,QAAQ,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,MAAM,CACjE,IAAI,CAAE,OAAO,CAAE,MAAM,CAAE,MAAM,CAAE,IAAI,CAAE,MAAM,CAAE,KAAK,CAAE,UAAU,CAC9D,MAAM,CAAE,MAAM,CAAE,MAAM,CAAE,OAAO,CAAE,OAAO,CAAE,OAAO,CAAE,QAAQ,CAC3D,QAAQ,CAAE,MAAM,CAAE,OAAO,CAAE,QAAQ,CAAE,QAAQ,CAAE,YAAY,CAChD,CAEb,GAAIA,aAAa,CAACC,QAAQ,CAACF,KAAK,CAAC,CAAE,CACjC;AACA,KAAM,CAAAG,UAAU,CAAGJ,KAAK,CAACK,OAAO,CAAC,IAAI,CAAE,EAAE,CAAC,CAC1C,KAAM,CAAAC,GAAG,CAAGC,UAAU,CAACH,UAAU,CAAC,CAClC,MAAO,CAAAI,KAAK,CAACF,GAAG,CAAC,CAAG,CAAC,CAAGA,GAAG,CAC7B,CAEA,MAAO,CAAAN,KAAK,CACd,CAAC,CACDS,QAAQ,CAAGC,OAAiC,EAAK,CAC/C,GAAIA,OAAO,CAACC,MAAM,CAACC,MAAM,CAAG,CAAC,CAAE,CAC7BhC,OAAO,CAACiC,KAAK,CAAC,qBAAqB,CAAEH,OAAO,CAACC,MAAM,CAAC,CACpDhB,MAAM,CAAC,GAAI,CAAAP,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAC7C,OACF,CACAM,OAAO,CAACgB,OAAO,CAACI,IAAI,CAAC,CACvB,CAAC,CACDD,KAAK,CAAGA,KAAY,EAAK,CACvBjC,OAAO,CAACiC,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1ClB,MAAM,CAACkB,KAAK,CAAC,CACf,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAE,MAAOA,KAAK,CAAE,CACdjC,OAAO,CAACiC,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}