{"ast":null,"code":"import Papa from 'papaparse';\nexport const loadCSVData = async () => {\n  try {\n    console.log('Attempting to fetch CSV data...');\n    const response = await fetch(process.env.PUBLIC_URL + '/UCL_24_25_Key_Data - Sheet1.csv');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV data: ${response.status} ${response.statusText}`);\n    }\n    const csvText = await response.text();\n    console.log('CSV data fetched successfully, parsing...');\n    return new Promise((resolve, reject) => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        transform: (value, field) => {\n          // Convert numeric fields\n          const numericFields = ['Born', 'MP', 'Starts', 'Min', '90s', 'Gls', 'Ast', 'G+A', 'G-PK', 'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG', 'xAG', 'npxG+xAG', 'PrgC', 'PrgP', 'PrgR', 'Gls.1', 'Ast.1', 'G+A.1', 'G-PK.1', 'G+A-PK', 'xG.1', 'xAG.1', 'xG+xAG', 'npxG.1', 'npxG+xAG.1'];\n          if (numericFields.includes(field)) {\n            // Remove commas from numbers like \"1,222\"\n            const cleanValue = value.replace(/,/g, '');\n            const num = parseFloat(cleanValue);\n            return isNaN(num) ? 0 : num;\n          }\n          return value;\n        },\n        complete: results => {\n          if (results.errors.length > 0) {\n            console.error('CSV parsing errors:', results.errors);\n            reject(new Error('Failed to parse CSV data'));\n            return;\n          }\n          resolve(results.data);\n        },\n        error: error => {\n          console.error('CSV parsing error:', error);\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('Error loading CSV data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["Papa","loadCSVData","console","log","response","fetch","process","env","PUBLIC_URL","ok","Error","status","statusText","csvText","text","Promise","resolve","reject","parse","header","skipEmptyLines","transform","value","field","numericFields","includes","cleanValue","replace","num","parseFloat","isNaN","complete","results","errors","length","error","data"],"sources":["/Users/ashrafnoor/Port Repo/UCL 24:25/src/services/csvService.ts"],"sourcesContent":["import Papa from 'papaparse';\nimport { Player } from '../types/player';\n\nexport const loadCSVData = async (): Promise<Player[]> => {\n  try {\n    console.log('Attempting to fetch CSV data...');\n    const response = await fetch(process.env.PUBLIC_URL + '/UCL_24_25_Key_Data - Sheet1.csv');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch CSV data: ${response.status} ${response.statusText}`);\n    }\n    const csvText = await response.text();\n    console.log('CSV data fetched successfully, parsing...');\n    \n    return new Promise((resolve, reject) => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        transform: (value: string, field: string) => {\n          // Convert numeric fields\n          const numericFields = [\n            'Born', 'MP', 'Starts', 'Min', '90s', 'Gls', 'Ast', 'G+A', 'G-PK', \n            'PK', 'PKatt', 'CrdY', 'CrdR', 'xG', 'npxG', 'xAG', 'npxG+xAG',\n            'PrgC', 'PrgP', 'PrgR', 'Gls.1', 'Ast.1', 'G+A.1', 'G-PK.1',\n            'G+A-PK', 'xG.1', 'xAG.1', 'xG+xAG', 'npxG.1', 'npxG+xAG.1'\n          ] as string[];\n          \n          if (numericFields.includes(field)) {\n            // Remove commas from numbers like \"1,222\"\n            const cleanValue = value.replace(/,/g, '');\n            const num = parseFloat(cleanValue);\n            return isNaN(num) ? 0 : num;\n          }\n          \n          return value;\n        },\n        complete: (results: Papa.ParseResult<Player>) => {\n          if (results.errors.length > 0) {\n            console.error('CSV parsing errors:', results.errors);\n            reject(new Error('Failed to parse CSV data'));\n            return;\n          }\n          resolve(results.data);\n        },\n        error: (error: Error) => {\n          console.error('CSV parsing error:', error);\n          reject(error);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('Error loading CSV data:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAG5B,OAAO,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAA+B;EACxD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAG,CAACC,UAAU,GAAG,kCAAkC,CAAC;IACzF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6BN,QAAQ,CAACO,MAAM,IAAIP,QAAQ,CAACQ,UAAU,EAAE,CAAC;IACxF;IACA,MAAMC,OAAO,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IACrCZ,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IAExD,OAAO,IAAIY,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCjB,IAAI,CAACkB,KAAK,CAACL,OAAO,EAAE;QAClBM,MAAM,EAAE,IAAI;QACZC,cAAc,EAAE,IAAI;QACpBC,SAAS,EAAEA,CAACC,KAAa,EAAEC,KAAa,KAAK;UAC3C;UACA,MAAMC,aAAa,GAAG,CACpB,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EACjE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,UAAU,EAC9D,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAC3D,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,CAChD;UAEb,IAAIA,aAAa,CAACC,QAAQ,CAACF,KAAK,CAAC,EAAE;YACjC;YACA,MAAMG,UAAU,GAAGJ,KAAK,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;YAC1C,MAAMC,GAAG,GAAGC,UAAU,CAACH,UAAU,CAAC;YAClC,OAAOI,KAAK,CAACF,GAAG,CAAC,GAAG,CAAC,GAAGA,GAAG;UAC7B;UAEA,OAAON,KAAK;QACd,CAAC;QACDS,QAAQ,EAAGC,OAAiC,IAAK;UAC/C,IAAIA,OAAO,CAACC,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;YAC7BhC,OAAO,CAACiC,KAAK,CAAC,qBAAqB,EAAEH,OAAO,CAACC,MAAM,CAAC;YACpDhB,MAAM,CAAC,IAAIP,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAC7C;UACF;UACAM,OAAO,CAACgB,OAAO,CAACI,IAAI,CAAC;QACvB,CAAC;QACDD,KAAK,EAAGA,KAAY,IAAK;UACvBjC,OAAO,CAACiC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;UAC1ClB,MAAM,CAACkB,KAAK,CAAC;QACf;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdjC,OAAO,CAACiC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}