{"ast":null,"code":"import { create } from 'zustand';\nconst initialFilters = {\n  search: '',\n  position: '',\n  team: '',\n  nation: '',\n  minGoals: 0,\n  minAssists: 0,\n  minMinutes: 0\n};\nconst initialSort = {\n  field: 'Gls',\n  direction: 'desc'\n};\nexport const usePlayerStore = create((set, get) => ({\n  players: [],\n  filteredPlayers: [],\n  filters: initialFilters,\n  sort: initialSort,\n  stats: null,\n  isLoading: false,\n  error: null,\n  setPlayers: players => {\n    console.log('Setting players:', players.length);\n    set({\n      players,\n      filteredPlayers: players\n    });\n    get().calculateStats();\n  },\n  setFilters: newFilters => {\n    console.log('Setting filters:', newFilters);\n    set(state => {\n      const updatedFilters = {\n        ...state.filters,\n        ...newFilters\n      };\n      return {\n        filters: updatedFilters\n      };\n    });\n    get().applyFiltersAndSort();\n  },\n  setSort: sort => {\n    console.log('Setting sort:', sort);\n    set(state => ({\n      sort\n    }));\n    get().applyFiltersAndSort();\n  },\n  resetFilters: () => {\n    console.log('Resetting filters');\n    set(state => ({\n      filters: initialFilters,\n      sort: initialSort\n    }));\n    get().applyFiltersAndSort();\n  },\n  applyFiltersAndSort: () => {\n    const {\n      players,\n      filters,\n      sort\n    } = get();\n    console.log('Applying filters and sort:', {\n      filters,\n      sort\n    });\n    let filtered = players.filter(player => {\n      const searchTerm = filters.search.toLowerCase();\n      const matchesSearch = !filters.search || player.Player.toLowerCase().includes(searchTerm) || player.Squad.toLowerCase().includes(searchTerm) || player.Nation.toLowerCase().includes(searchTerm) || player.Pos.toLowerCase().includes(searchTerm);\n      const matchesPosition = !filters.position || player.Pos === filters.position;\n      const matchesTeam = !filters.team || player.Squad === filters.team;\n      const matchesNation = !filters.nation || player.Nation === filters.nation;\n      const matchesMinGoals = !filters.minGoals || (player.Gls || 0) >= filters.minGoals;\n      const matchesMinAssists = !filters.minAssists || (player.Ast || 0) >= filters.minAssists;\n      const matchesMinMinutes = !filters.minMinutes || (player.Min || 0) >= filters.minMinutes;\n      return matchesSearch && matchesPosition && matchesTeam && matchesNation && matchesMinGoals && matchesMinAssists && matchesMinMinutes;\n    });\n\n    // Sort\n    filtered.sort((a, b) => {\n      var _a$sort$field, _b$sort$field;\n      const aValue = (_a$sort$field = a[sort.field]) !== null && _a$sort$field !== void 0 ? _a$sort$field : 0;\n      const bValue = (_b$sort$field = b[sort.field]) !== null && _b$sort$field !== void 0 ? _b$sort$field : 0;\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sort.direction === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n      }\n      const aNum = typeof aValue === 'number' ? aValue : parseFloat(aValue) || 0;\n      const bNum = typeof bValue === 'number' ? bValue : parseFloat(bValue) || 0;\n      return sort.direction === 'asc' ? aNum - bNum : bNum - aNum;\n    });\n    console.log('Filtered players:', filtered.length);\n    set({\n      filteredPlayers: filtered\n    });\n  },\n  calculateStats: () => {\n    const {\n      players\n    } = get();\n    if (players.length === 0) {\n      set({\n        stats: null\n      });\n      return;\n    }\n    const totalPlayers = players.length;\n    const totalGoals = players.reduce((sum, player) => sum + player.Gls, 0);\n    const totalAssists = players.reduce((sum, player) => sum + player.Ast, 0);\n    const averageAge = players.reduce((sum, player) => sum + (2024 - player.Born), 0) / totalPlayers;\n    const topScorers = [...players].sort((a, b) => b.Gls - a.Gls).slice(0, 10);\n    const topAssisters = [...players].sort((a, b) => b.Ast - a.Ast).slice(0, 10);\n    const teams = [...new Set(players.map(p => p.Squad))].sort();\n    const positions = [...new Set(players.map(p => p.Pos))].sort();\n    const nations = [...new Set(players.map(p => p.Nation))].sort();\n    const stats = {\n      totalPlayers,\n      totalGoals,\n      totalAssists,\n      averageAge,\n      topScorers,\n      topAssisters,\n      teams,\n      positions,\n      nations\n    };\n    set({\n      stats\n    });\n  },\n  setLoading: isLoading => set({\n    isLoading\n  }),\n  setError: error => set({\n    error\n  })\n}));","map":{"version":3,"names":["create","initialFilters","search","position","team","nation","minGoals","minAssists","minMinutes","initialSort","field","direction","usePlayerStore","set","get","players","filteredPlayers","filters","sort","stats","isLoading","error","setPlayers","console","log","length","calculateStats","setFilters","newFilters","state","updatedFilters","applyFiltersAndSort","setSort","resetFilters","filtered","filter","player","searchTerm","toLowerCase","matchesSearch","Player","includes","Squad","Nation","Pos","matchesPosition","matchesTeam","matchesNation","matchesMinGoals","Gls","matchesMinAssists","Ast","matchesMinMinutes","Min","a","b","_a$sort$field","_b$sort$field","aValue","bValue","localeCompare","aNum","parseFloat","bNum","totalPlayers","totalGoals","reduce","sum","totalAssists","averageAge","Born","topScorers","slice","topAssisters","teams","Set","map","p","positions","nations","setLoading","setError"],"sources":["/Users/ashrafnoor/Port Repo/UCL 24:25/src/store/playerStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { Player, FilterState, SortState, PlayerStats } from '../types/player';\n\ninterface PlayerStore {\n  players: Player[];\n  filteredPlayers: Player[];\n  filters: FilterState;\n  sort: SortState;\n  stats: PlayerStats | null;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  setPlayers: (players: Player[]) => void;\n  setFilters: (filters: Partial<FilterState>) => void;\n  setSort: (sort: SortState) => void;\n  resetFilters: () => void;\n  calculateStats: () => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  applyFiltersAndSort: () => void;\n}\n\nconst initialFilters: FilterState = {\n  search: '',\n  position: '',\n  team: '',\n  nation: '',\n  minGoals: 0,\n  minAssists: 0,\n  minMinutes: 0,\n};\n\nconst initialSort: SortState = {\n  field: 'Gls',\n  direction: 'desc',\n};\n\nexport const usePlayerStore = create<PlayerStore>((set, get) => ({\n  players: [],\n  filteredPlayers: [],\n  filters: initialFilters,\n  sort: initialSort,\n  stats: null,\n  isLoading: false,\n  error: null,\n\n  setPlayers: (players) => {\n    console.log('Setting players:', players.length);\n    set({ players, filteredPlayers: players });\n    get().calculateStats();\n  },\n\n  setFilters: (newFilters) => {\n    console.log('Setting filters:', newFilters);\n    set((state) => {\n      const updatedFilters = { ...state.filters, ...newFilters };\n      return { filters: updatedFilters };\n    });\n    get().applyFiltersAndSort();\n  },\n\n  setSort: (sort) => {\n    console.log('Setting sort:', sort);\n    set((state) => ({ sort }));\n    get().applyFiltersAndSort();\n  },\n\n  resetFilters: () => {\n    console.log('Resetting filters');\n    set((state) => ({ \n      filters: initialFilters, \n      sort: initialSort \n    }));\n    get().applyFiltersAndSort();\n  },\n\n  applyFiltersAndSort: () => {\n    const { players, filters, sort } = get();\n    console.log('Applying filters and sort:', { filters, sort });\n    \n    let filtered = players.filter(player => {\n      const searchTerm = filters.search.toLowerCase();\n      const matchesSearch = !filters.search || \n        player.Player.toLowerCase().includes(searchTerm) ||\n        player.Squad.toLowerCase().includes(searchTerm) ||\n        player.Nation.toLowerCase().includes(searchTerm) ||\n        player.Pos.toLowerCase().includes(searchTerm);\n      const matchesPosition = !filters.position || player.Pos === filters.position;\n      const matchesTeam = !filters.team || player.Squad === filters.team;\n      const matchesNation = !filters.nation || player.Nation === filters.nation;\n      const matchesMinGoals = !filters.minGoals || (player.Gls || 0) >= filters.minGoals;\n      const matchesMinAssists = !filters.minAssists || (player.Ast || 0) >= filters.minAssists;\n      const matchesMinMinutes = !filters.minMinutes || (player.Min || 0) >= filters.minMinutes;\n\n      return matchesSearch && matchesPosition && matchesTeam && matchesNation && \n             matchesMinGoals && matchesMinAssists && matchesMinMinutes;\n    });\n\n    // Sort\n    filtered.sort((a, b) => {\n      const aValue = a[sort.field] ?? 0;\n      const bValue = b[sort.field] ?? 0;\n      \n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sort.direction === 'asc' \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      const aNum = typeof aValue === 'number' ? aValue : parseFloat(aValue as string) || 0;\n      const bNum = typeof bValue === 'number' ? bValue : parseFloat(bValue as string) || 0;\n      \n      return sort.direction === 'asc' ? aNum - bNum : bNum - aNum;\n    });\n\n    console.log('Filtered players:', filtered.length);\n    set({ filteredPlayers: filtered });\n  },\n\n  calculateStats: () => {\n    const { players } = get();\n    \n    if (players.length === 0) {\n      set({ stats: null });\n      return;\n    }\n\n    const totalPlayers = players.length;\n    const totalGoals = players.reduce((sum, player) => sum + player.Gls, 0);\n    const totalAssists = players.reduce((sum, player) => sum + player.Ast, 0);\n    const averageAge = players.reduce((sum, player) => sum + (2024 - player.Born), 0) / totalPlayers;\n    \n    const topScorers = [...players]\n      .sort((a, b) => b.Gls - a.Gls)\n      .slice(0, 10);\n    \n    const topAssisters = [...players]\n      .sort((a, b) => b.Ast - a.Ast)\n      .slice(0, 10);\n    \n    const teams = [...new Set(players.map(p => p.Squad))].sort() as string[];\n    const positions = [...new Set(players.map(p => p.Pos))].sort() as string[];\n    const nations = [...new Set(players.map(p => p.Nation))].sort() as string[];\n\n    const stats: PlayerStats = {\n      totalPlayers,\n      totalGoals,\n      totalAssists,\n      averageAge,\n      topScorers,\n      topAssisters,\n      teams,\n      positions,\n      nations,\n    };\n\n    set({ stats });\n  },\n\n  setLoading: (isLoading) => set({ isLoading }),\n  setError: (error) => set({ error }),\n})); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAuBhC,MAAMC,cAA2B,GAAG;EAClCC,MAAM,EAAE,EAAE;EACVC,QAAQ,EAAE,EAAE;EACZC,IAAI,EAAE,EAAE;EACRC,MAAM,EAAE,EAAE;EACVC,QAAQ,EAAE,CAAC;EACXC,UAAU,EAAE,CAAC;EACbC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,WAAsB,GAAG;EAC7BC,KAAK,EAAE,KAAK;EACZC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGZ,MAAM,CAAc,CAACa,GAAG,EAAEC,GAAG,MAAM;EAC/DC,OAAO,EAAE,EAAE;EACXC,eAAe,EAAE,EAAE;EACnBC,OAAO,EAAEhB,cAAc;EACvBiB,IAAI,EAAET,WAAW;EACjBU,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EAEXC,UAAU,EAAGP,OAAO,IAAK;IACvBQ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAET,OAAO,CAACU,MAAM,CAAC;IAC/CZ,GAAG,CAAC;MAAEE,OAAO;MAAEC,eAAe,EAAED;IAAQ,CAAC,CAAC;IAC1CD,GAAG,CAAC,CAAC,CAACY,cAAc,CAAC,CAAC;EACxB,CAAC;EAEDC,UAAU,EAAGC,UAAU,IAAK;IAC1BL,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEI,UAAU,CAAC;IAC3Cf,GAAG,CAAEgB,KAAK,IAAK;MACb,MAAMC,cAAc,GAAG;QAAE,GAAGD,KAAK,CAACZ,OAAO;QAAE,GAAGW;MAAW,CAAC;MAC1D,OAAO;QAAEX,OAAO,EAAEa;MAAe,CAAC;IACpC,CAAC,CAAC;IACFhB,GAAG,CAAC,CAAC,CAACiB,mBAAmB,CAAC,CAAC;EAC7B,CAAC;EAEDC,OAAO,EAAGd,IAAI,IAAK;IACjBK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,IAAI,CAAC;IAClCL,GAAG,CAAEgB,KAAK,KAAM;MAAEX;IAAK,CAAC,CAAC,CAAC;IAC1BJ,GAAG,CAAC,CAAC,CAACiB,mBAAmB,CAAC,CAAC;EAC7B,CAAC;EAEDE,YAAY,EAAEA,CAAA,KAAM;IAClBV,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAChCX,GAAG,CAAEgB,KAAK,KAAM;MACdZ,OAAO,EAAEhB,cAAc;MACvBiB,IAAI,EAAET;IACR,CAAC,CAAC,CAAC;IACHK,GAAG,CAAC,CAAC,CAACiB,mBAAmB,CAAC,CAAC;EAC7B,CAAC;EAEDA,mBAAmB,EAAEA,CAAA,KAAM;IACzB,MAAM;MAAEhB,OAAO;MAAEE,OAAO;MAAEC;IAAK,CAAC,GAAGJ,GAAG,CAAC,CAAC;IACxCS,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAE;MAAEP,OAAO;MAAEC;IAAK,CAAC,CAAC;IAE5D,IAAIgB,QAAQ,GAAGnB,OAAO,CAACoB,MAAM,CAACC,MAAM,IAAI;MACtC,MAAMC,UAAU,GAAGpB,OAAO,CAACf,MAAM,CAACoC,WAAW,CAAC,CAAC;MAC/C,MAAMC,aAAa,GAAG,CAACtB,OAAO,CAACf,MAAM,IACnCkC,MAAM,CAACI,MAAM,CAACF,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,UAAU,CAAC,IAChDD,MAAM,CAACM,KAAK,CAACJ,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,UAAU,CAAC,IAC/CD,MAAM,CAACO,MAAM,CAACL,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,UAAU,CAAC,IAChDD,MAAM,CAACQ,GAAG,CAACN,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,UAAU,CAAC;MAC/C,MAAMQ,eAAe,GAAG,CAAC5B,OAAO,CAACd,QAAQ,IAAIiC,MAAM,CAACQ,GAAG,KAAK3B,OAAO,CAACd,QAAQ;MAC5E,MAAM2C,WAAW,GAAG,CAAC7B,OAAO,CAACb,IAAI,IAAIgC,MAAM,CAACM,KAAK,KAAKzB,OAAO,CAACb,IAAI;MAClE,MAAM2C,aAAa,GAAG,CAAC9B,OAAO,CAACZ,MAAM,IAAI+B,MAAM,CAACO,MAAM,KAAK1B,OAAO,CAACZ,MAAM;MACzE,MAAM2C,eAAe,GAAG,CAAC/B,OAAO,CAACX,QAAQ,IAAI,CAAC8B,MAAM,CAACa,GAAG,IAAI,CAAC,KAAKhC,OAAO,CAACX,QAAQ;MAClF,MAAM4C,iBAAiB,GAAG,CAACjC,OAAO,CAACV,UAAU,IAAI,CAAC6B,MAAM,CAACe,GAAG,IAAI,CAAC,KAAKlC,OAAO,CAACV,UAAU;MACxF,MAAM6C,iBAAiB,GAAG,CAACnC,OAAO,CAACT,UAAU,IAAI,CAAC4B,MAAM,CAACiB,GAAG,IAAI,CAAC,KAAKpC,OAAO,CAACT,UAAU;MAExF,OAAO+B,aAAa,IAAIM,eAAe,IAAIC,WAAW,IAAIC,aAAa,IAChEC,eAAe,IAAIE,iBAAiB,IAAIE,iBAAiB;IAClE,CAAC,CAAC;;IAEF;IACAlB,QAAQ,CAAChB,IAAI,CAAC,CAACoC,CAAC,EAAEC,CAAC,KAAK;MAAA,IAAAC,aAAA,EAAAC,aAAA;MACtB,MAAMC,MAAM,IAAAF,aAAA,GAAGF,CAAC,CAACpC,IAAI,CAACR,KAAK,CAAC,cAAA8C,aAAA,cAAAA,aAAA,GAAI,CAAC;MACjC,MAAMG,MAAM,IAAAF,aAAA,GAAGF,CAAC,CAACrC,IAAI,CAACR,KAAK,CAAC,cAAA+C,aAAA,cAAAA,aAAA,GAAI,CAAC;MAEjC,IAAI,OAAOC,MAAM,KAAK,QAAQ,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;QAC5D,OAAOzC,IAAI,CAACP,SAAS,KAAK,KAAK,GAC3B+C,MAAM,CAACE,aAAa,CAACD,MAAM,CAAC,GAC5BA,MAAM,CAACC,aAAa,CAACF,MAAM,CAAC;MAClC;MAEA,MAAMG,IAAI,GAAG,OAAOH,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGI,UAAU,CAACJ,MAAgB,CAAC,IAAI,CAAC;MACpF,MAAMK,IAAI,GAAG,OAAOJ,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGG,UAAU,CAACH,MAAgB,CAAC,IAAI,CAAC;MAEpF,OAAOzC,IAAI,CAACP,SAAS,KAAK,KAAK,GAAGkD,IAAI,GAAGE,IAAI,GAAGA,IAAI,GAAGF,IAAI;IAC7D,CAAC,CAAC;IAEFtC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEU,QAAQ,CAACT,MAAM,CAAC;IACjDZ,GAAG,CAAC;MAAEG,eAAe,EAAEkB;IAAS,CAAC,CAAC;EACpC,CAAC;EAEDR,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAM;MAAEX;IAAQ,CAAC,GAAGD,GAAG,CAAC,CAAC;IAEzB,IAAIC,OAAO,CAACU,MAAM,KAAK,CAAC,EAAE;MACxBZ,GAAG,CAAC;QAAEM,KAAK,EAAE;MAAK,CAAC,CAAC;MACpB;IACF;IAEA,MAAM6C,YAAY,GAAGjD,OAAO,CAACU,MAAM;IACnC,MAAMwC,UAAU,GAAGlD,OAAO,CAACmD,MAAM,CAAC,CAACC,GAAG,EAAE/B,MAAM,KAAK+B,GAAG,GAAG/B,MAAM,CAACa,GAAG,EAAE,CAAC,CAAC;IACvE,MAAMmB,YAAY,GAAGrD,OAAO,CAACmD,MAAM,CAAC,CAACC,GAAG,EAAE/B,MAAM,KAAK+B,GAAG,GAAG/B,MAAM,CAACe,GAAG,EAAE,CAAC,CAAC;IACzE,MAAMkB,UAAU,GAAGtD,OAAO,CAACmD,MAAM,CAAC,CAACC,GAAG,EAAE/B,MAAM,KAAK+B,GAAG,IAAI,IAAI,GAAG/B,MAAM,CAACkC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAGN,YAAY;IAEhG,MAAMO,UAAU,GAAG,CAAC,GAAGxD,OAAO,CAAC,CAC5BG,IAAI,CAAC,CAACoC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACN,GAAG,GAAGK,CAAC,CAACL,GAAG,CAAC,CAC7BuB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAEf,MAAMC,YAAY,GAAG,CAAC,GAAG1D,OAAO,CAAC,CAC9BG,IAAI,CAAC,CAACoC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACJ,GAAG,GAAGG,CAAC,CAACH,GAAG,CAAC,CAC7BqB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAEf,MAAME,KAAK,GAAG,CAAC,GAAG,IAAIC,GAAG,CAAC5D,OAAO,CAAC6D,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACnC,KAAK,CAAC,CAAC,CAAC,CAACxB,IAAI,CAAC,CAAa;IACxE,MAAM4D,SAAS,GAAG,CAAC,GAAG,IAAIH,GAAG,CAAC5D,OAAO,CAAC6D,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACjC,GAAG,CAAC,CAAC,CAAC,CAAC1B,IAAI,CAAC,CAAa;IAC1E,MAAM6D,OAAO,GAAG,CAAC,GAAG,IAAIJ,GAAG,CAAC5D,OAAO,CAAC6D,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAClC,MAAM,CAAC,CAAC,CAAC,CAACzB,IAAI,CAAC,CAAa;IAE3E,MAAMC,KAAkB,GAAG;MACzB6C,YAAY;MACZC,UAAU;MACVG,YAAY;MACZC,UAAU;MACVE,UAAU;MACVE,YAAY;MACZC,KAAK;MACLI,SAAS;MACTC;IACF,CAAC;IAEDlE,GAAG,CAAC;MAAEM;IAAM,CAAC,CAAC;EAChB,CAAC;EAED6D,UAAU,EAAG5D,SAAS,IAAKP,GAAG,CAAC;IAAEO;EAAU,CAAC,CAAC;EAC7C6D,QAAQ,EAAG5D,KAAK,IAAKR,GAAG,CAAC;IAAEQ;EAAM,CAAC;AACpC,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}